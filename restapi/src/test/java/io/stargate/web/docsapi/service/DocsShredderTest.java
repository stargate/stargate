package io.stargate.web.docsapi.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.when;

import com.datastax.oss.driver.shaded.guava.common.collect.ImmutableList;
import io.stargate.web.docsapi.dao.DocumentDB;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.jsfr.json.JsonSurfer;
import org.jsfr.json.JsonSurferJackson;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class DocsShredderTest {
  private DocsShredder service;
  private final JsonSurfer surfer = JsonSurferJackson.INSTANCE;
  @Mock private DocumentDB db;

  @BeforeEach
  public void setup() {
    service = new DocsShredder(DocsApiConfiguration.DEFAULT);
  }

  public boolean arraysMatch(Object[] array1, Object[] array2) {
    if (array1.length != array2.length) {
      return false;
    }
    for (int i = 0; i < array1.length; i++) {
      if (array1[i] != array2[i] && !array1[i].equals(array2[i])) {
        return false;
      }
    }
    return true;
  }

  @Test
  public void shredJson_happyPath() {
    Object[] expectedRow0 =
        new Object[] {
          "documentId",
          "some",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "some",
          "value",
          null,
          null
        };
    Object[] expectedRow1 =
        new Object[] {
          "documentId",
          "array",
          "[000000]",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "[000000]",
          null,
          1.0,
          null
        };
    Object[] expectedRow2 =
        new Object[] {
          "documentId",
          "array",
          "[000001]",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "[000001]",
          null,
          null,
          true
        };
    Object[] expectedRow3 =
        new Object[] {
          "documentId",
          "array",
          "[000002]",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "[000002]",
          null,
          3.0,
          null
        };
    Object[] expectedRow4 =
        new Object[] {
          "documentId",
          "nested",
          "structure",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "structure",
          null,
          23.456,
          null
        };
    when(db.newBindMap(anyList())).thenCallRealMethod();
    when(db.treatBooleansAsNumeric()).thenReturn(false);
    String payload =
        "{\"some\":\"value\", \"array\":[1, true, 3], \"nested\": {\"structure\": 23.456}}";
    ImmutablePair<List<Object[]>, List<String>> results =
        service.shredJson(surfer, db, Collections.emptyList(), "documentId", payload, false);
    List<Object[]> bindParams = results.left;
    assertThat(bindParams.size()).isEqualTo(5);
    assertThat(arraysMatch(bindParams.get(0), expectedRow0)).isTrue();
    assertThat(arraysMatch(bindParams.get(1), expectedRow1)).isTrue();
    assertThat(arraysMatch(bindParams.get(2), expectedRow2)).isTrue();
    assertThat(arraysMatch(bindParams.get(3), expectedRow3)).isTrue();
    assertThat(arraysMatch(bindParams.get(4), expectedRow4)).isTrue();

    Set<String> firstLevelKeyset = new HashSet<>(results.right);
    assertThat(firstLevelKeyset.size()).isEqualTo(3);
    assertThat(firstLevelKeyset).contains("some", "array", "nested");
  }

  @Test
  public void shredJson_happyPathAtNestedPath() {
    Object[] expectedRow0 =
        new Object[] {
          "documentId",
          "nested",
          "path",
          "spot",
          "some",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "some",
          "value",
          null,
          null
        };
    Object[] expectedRow1 =
        new Object[] {
          "documentId",
          "nested",
          "path",
          "spot",
          "array",
          "[000000]",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "[000000]",
          null,
          1.0,
          null
        };
    Object[] expectedRow2 =
        new Object[] {
          "documentId",
          "nested",
          "path",
          "spot",
          "array",
          "[000001]",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "[000001]",
          null,
          null,
          true
        };
    Object[] expectedRow3 =
        new Object[] {
          "documentId",
          "nested",
          "path",
          "spot",
          "array",
          "[000002]",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "[000002]",
          null,
          3.0,
          null
        };
    Object[] expectedRow4 =
        new Object[] {
          "documentId",
          "nested",
          "path",
          "spot",
          "nested",
          "structure",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "structure",
          null,
          23.456,
          null
        };
    when(db.newBindMap(anyList())).thenCallRealMethod();
    when(db.treatBooleansAsNumeric()).thenReturn(false);
    List<String> prependedPath = ImmutableList.of("nested", "path", "spot");
    String payload =
        "{\"some\":\"value\", \"array\":[1, true, 3], \"nested\": {\"structure\": 23.456}}";
    ImmutablePair<List<Object[]>, List<String>> results =
        service.shredJson(surfer, db, prependedPath, "documentId", payload, false);
    List<Object[]> bindParams = results.left;
    assertThat(bindParams.size()).isEqualTo(5);
    assertThat(arraysMatch(bindParams.get(0), expectedRow0)).isTrue();
    assertThat(arraysMatch(bindParams.get(1), expectedRow1)).isTrue();
    assertThat(arraysMatch(bindParams.get(2), expectedRow2)).isTrue();
    assertThat(arraysMatch(bindParams.get(3), expectedRow3)).isTrue();
    assertThat(arraysMatch(bindParams.get(4), expectedRow4)).isTrue();

    Set<String> firstLevelKeyset = new HashSet<>(results.right);
    assertThat(firstLevelKeyset.size()).isEqualTo(3);
    assertThat(firstLevelKeyset).contains("some", "array", "nested");
  }

  @Test
  public void shredJson_happyPathEmptyObject() {
    Object[] expectedRow0 =
        new Object[] {
          "documentId",
          "some",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "some",
          DocumentDB.EMPTY_OBJECT_MARKER,
          null,
          null
        };
    Object[] expectedRow1 =
        new Object[] {
          "documentId",
          "array",
          "[000000]",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "[000000]",
          DocumentDB.EMPTY_ARRAY_MARKER,
          null,
          null
        };
    Object[] expectedRow2 =
        new Object[] {
          "documentId",
          "array",
          "[000001]",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "[000001]",
          null,
          null,
          true
        };
    Object[] expectedRow3 =
        new Object[] {
          "documentId",
          "array",
          "[000002]",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "[000002]",
          null,
          3.0,
          null
        };
    Object[] expectedRow4 =
        new Object[] {
          "documentId",
          "nested",
          "structure",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "structure",
          null,
          23.456,
          null
        };
    when(db.newBindMap(anyList())).thenCallRealMethod();
    when(db.treatBooleansAsNumeric()).thenReturn(false);
    String payload = "{\"some\":{}, \"array\":[[], true, 3], \"nested\": {\"structure\": 23.456}}";
    ImmutablePair<List<Object[]>, List<String>> results =
        service.shredJson(surfer, db, Collections.emptyList(), "documentId", payload, false);
    List<Object[]> bindParams = results.left;
    assertThat(bindParams.size()).isEqualTo(5);
    assertThat(arraysMatch(bindParams.get(0), expectedRow0)).isTrue();
    assertThat(arraysMatch(bindParams.get(1), expectedRow1)).isTrue();
    assertThat(arraysMatch(bindParams.get(2), expectedRow2)).isTrue();
    assertThat(arraysMatch(bindParams.get(3), expectedRow3)).isTrue();
    assertThat(arraysMatch(bindParams.get(4), expectedRow4)).isTrue();

    Set<String> firstLevelKeyset = new HashSet<>(results.right);
    assertThat(firstLevelKeyset.size()).isEqualTo(3);
    assertThat(firstLevelKeyset).contains("some", "array", "nested");
  }

  @Test
  public void shredJson_emptyObject() {
    String payload = "{}";
    ImmutablePair<List<Object[]>, List<String>> results =
        service.shredJson(surfer, db, Collections.emptyList(), "documentId", payload, false);
    List<Object[]> bindParams = results.left;
    assertThat(bindParams.size()).isEqualTo(0);

    Set<String> firstLevelKeyset = new HashSet<>(results.right);
    assertThat(firstLevelKeyset.size()).isEqualTo(0);
  }

  @Test
  public void shredJson_errorPatching() {
    String payload = "[1, true, 3]";
    assertThatThrownBy(
            () ->
                service.shredJson(surfer, db, Collections.emptyList(), "documentId", payload, true))
        .hasMessage("A patch operation must be done with a JSON object, not an array.");
  }

  @Test
  public void shredJson_errorMaxDepth() {
    String payload =
        "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\"tooDeep\"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]";
    assertThatThrownBy(
            () ->
                service.shredJson(
                    surfer, db, Collections.emptyList(), "documentId", payload, false))
        .hasMessage("Max depth of 64 exceeded.");
  }
}
