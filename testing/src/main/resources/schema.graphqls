enum BasicType {
  CUSTOM
  INT
  TIMEUUID
  TIMESTAMP
  UDT
  BIGINT
  TIME
  DURATION
  VARINT
  UUID
  BOOLEAN
  TINYINT
  SMALLINT
  INET
  ASCII
  DECIMAL
  BLOB
  LIST
  MAP
  VARCHAR
  TUPLE
  DOUBLE
  COUNTER
  DATE
  TEXT
  FLOAT
  SET
}

input ClusteringKeyInput {
  name: String!
  type: DataTypeInput!
  order: String
}

type Column {
  kind: ColumnKind!
  name: String!
  type: DataType!
}

input ColumnInput {
  name: String!
  type: DataTypeInput!
}

enum ColumnKind {
  COMPACT
  UNKNOWN
  PARTITION
  CLUSTERING
  REGULAR
  STATIC
}

type DataCenter {
  name: String!
  replicas: Int!
}

type DataType {
  basic: BasicType!
  info: DataTypeInfo
}

type DataTypeInfo {
  name: String
  subTypes: [DataType]
}

input DataTypeInfoInput {
  subTypes: [DataTypeInput]
  name: String
}

input DataTypeInput {
  info: DataTypeInfoInput
  basic: BasicType!
}

type Keyspace {
  dcs: [DataCenter]
  name: String!
  table(name: String!): Table
  tables: [Table]
}

type Mutation {
  createTable(
    keyspaceName: String!
    tableName: String!
    partitionKeys: [ColumnInput]!
    clusteringKeys: [ClusteringKeyInput]
    values: [ColumnInput]
    ifNotExists: Boolean
  ): Boolean
  alterTableAdd(
    keyspaceName: String!
    tableName: String!
    toAdd: [ColumnInput]!
  ): Boolean
  alterTableDrop(
    keyspaceName: String!
    tableName: String!
    toDrop: [String]!
  ): Boolean
  dropTable(
    keyspaceName: String!
    tableName: String!
    ifExists: Boolean
  ): Boolean
}

type Query {
  keyspace(name: String!): Keyspace
  keyspaces: [Keyspace]
}

type Table {
  columns: [Column]
  name: String!
}

scalar Decimal

input DecimalFilterInput {
    eq: Decimal
    notEq: Decimal
    gt: Decimal
    gte: Decimal
    lt: Decimal
    lte: Decimal
    in: [Decimal]
}

type Mutation {
    deleteOrders(
        value: OrdersInput!
        ifExists: Boolean
        ifCondition: OrdersFilterInput
        options: MutationOptions
    ): OrdersMutationResult
    insertOrders(
        value: OrdersInput!
        ifNotExists: Boolean
        options: MutationOptions
    ): OrdersMutationResult
    updateOrders(
        value: OrdersInput!
        ifExists: Boolean
        ifCondition: OrdersFilterInput
        options: MutationOptions
    ): OrdersMutationResult
    deleteProducts(
        value: ProductsInput!
        ifExists: Boolean
        ifCondition: ProductsFilterInput
        options: MutationOptions
    ): ProductsMutationResult
    insertProducts(
        value: ProductsInput!
        ifNotExists: Boolean
        options: MutationOptions
    ): ProductsMutationResult
    updateProducts(
        value: ProductsInput!
        ifExists: Boolean
        ifCondition: ProductsFilterInput
        options: MutationOptions
    ): ProductsMutationResult
}

enum MutationConsistency {
    LOCAL_ONE
    LOCAL_QUORUM
    ALL
}

input MutationOptions {
    consistency: MutationConsistency
    serialConsistency: SerialConsistency
}

type Orders {
    prodName: String
    customerName: String
    address: String
    description: String
    id: Uuid
    price: Decimal
    prodId: Uuid
    sellPrice: Decimal
}

input OrdersFilterInput {
    prodName: StringFilterInput
    customerName: StringFilterInput
    address: StringFilterInput
    description: StringFilterInput
    id: UuidFilterInput
    price: DecimalFilterInput
    prodId: UuidFilterInput
    sellPrice: DecimalFilterInput
}

input OrdersInput {
    prodName: String
    customerName: String
    address: String
    description: String
    id: Uuid
    price: Decimal
    prodId: Uuid
    sellPrice: Decimal
}

type OrdersMutationResult {
    applied: Boolean
    value: Orders
}

enum OrdersOrder {
    prodName_DESC
    prodName_ASC
    customerName_DESC
    customerName_ASC
    address_DESC
    address_ASC
    description_DESC
    description_ASC
    id_DESC
    id_ASC
    price_DESC
    price_ASC
    prodId_DESC
    prodId_ASC
    sellPrice_DESC
    sellPrice_ASC
}

type OrdersResult {
    pageState: String
    values: [Orders!]
}

type Products {
    id: Uuid
    name: String
    price: Decimal
    created: Timestamp
    description: String
}

input ProductsFilterInput {
    id: UuidFilterInput
    name: StringFilterInput
    price: DecimalFilterInput
    created: TimestampFilterInput
    description: StringFilterInput
}

input ProductsInput {
    id: Uuid
    name: String
    price: Decimal
    created: Timestamp
    description: String
}

type ProductsMutationResult {
    applied: Boolean
    value: Products
}

enum ProductsOrder {
    id_DESC
    id_ASC
    name_DESC
    name_ASC
    price_DESC
    price_ASC
    created_DESC
    created_ASC
    description_DESC
    description_ASC
}

type ProductsResult {
    pageState: String
    values: [Products!]
}

type Query {
    orders(
        value: OrdersInput
        filter: OrdersFilterInput
        orderBy: [OrdersOrder]
        options: QueryOptions
    ): OrdersResult
    ordersFilter(
        filter: OrdersFilterInput
        orderBy: [OrdersOrder]
        options: QueryOptions
    ): OrdersResult
    @deprecated(reason: "No longer supported. Use root type instead.")
    products(
        value: ProductsInput
        filter: ProductsFilterInput
        orderBy: [ProductsOrder]
        options: QueryOptions
    ): ProductsResult
    productsFilter(
        filter: ProductsFilterInput
        orderBy: [ProductsOrder]
        options: QueryOptions
    ): ProductsResult
    @deprecated(reason: "No longer supported. Use root type instead.")
}

enum QueryConsistency {
    LOCAL_ONE
    LOCAL_QUORUM
    ALL
    SERIAL
    LOCAL_SERIAL
}

input QueryOptions {
    consistency: QueryConsistency
    limit: Int
    pageSize: Int = 100
    pageState: String
}

enum SerialConsistency {
    SERIAL
    LOCAL_SERIAL
}

input StringFilterInput {
    eq: String
    notEq: String
    gt: String
    gte: String
    lt: String
    lte: String
    in: [String]
}

scalar Timestamp

input TimestampFilterInput {
    eq: Timestamp
    notEq: Timestamp
    gt: Timestamp
    gte: Timestamp
    lt: Timestamp
    lte: Timestamp
    in: [Timestamp]
}

scalar Uuid

input UuidFilterInput {
    eq: Uuid
    notEq: Uuid
    gt: Uuid
    gte: Uuid
    lt: Uuid
    lte: Uuid
    in: [Uuid]
}

