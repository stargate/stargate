---
# please keep properties in the alphabetical order
# note that this config is shared among all APIs, unless explicitly overridden

stargate:

  # security and authentication configuration
  # see io.stargate.sgv2.api.common.config.AuthConfig for all config properties and options
  auth:
    # header-based security by default
    # if changed, adapt token resolver type
    header-based:
      enabled: true

    # Cassandra token resolver from principal
    token-resolver:
      type: principal

  # configures data store
  # see io.stargate.sgv2.api.common.config.DataStoreConfig for all config properties and options
  data-store:
    ignore-bridge: ${stargate.multi-tenancy.enabled}

  # configures metadata keys to include when calling the Bridge
  # see io.stargate.sgv2.api.common.config.GrpcMetadataConfig for all config properties and options
  grpc-metadata:

  # metrics properties
  # see io.stargate.sgv2.api.common.config.MetricsConfig for all config properties and options
  metrics:
    tenant-request-counter:
      enabled: ${stargate.multi-tenancy.enabled}

  # multi tenancy settings
  # see io.stargate.sgv2.api.common.config.MultiTenancyConfig for all config properties and options
  multi-tenancy:
    enabled: false

  # queries settings (consistency level, etc)
  # see io.stargate.sgv2.docsapi.config.QueriesConfig for all config properties and options
  queries:


quarkus:

  application:
    ui-header: ${quarkus.application.name} (powered by DataStax)

  # cache properties
  cache:
    caffeine:
      # keyspace cache for the schema management
      keyspace-cache:
        maximum-size: 1000
        expire-after-access: PT5M
        metrics-enabled: true

  # properties for the gRPC clients
  grpc:
    # all the clients' setup, only bridge
    clients:
      bridge:
        host: localhost
        port: 8091

    # force no grpc server start in dev as we have no grpc service
    dev-mode:
      force-server-start: false

  # log format setup
  log:
    console:
      format: "%-5p [%t] %d{yyyy-MM-dd HH:mm:ss,SSS} %F:%L - %m%n"

    # silent caffeine cache warnings
    category:
      'com.github.benmanes.caffeine.cache':
        level: ERROR


  #  HTTP settings
  http:

    # disable basic auth completely
    auth:
      basic: false

    # access log format, must be explicitly enabled
    access-log:
      pattern: "%h %l %t \"%r\" %s %b"

    # non-application path to /stargate
    non-application-root-path: stargate

  # built-in micrometer properties
  micrometer:

    # exports at prometheus default path
    export:
      prometheus:
        path: /metrics

  # OpenTelemetry configuration
  otel:
    enabled: false

  # information for the generated Open API definitions
  smallrye-openapi:
    info-title: ${quarkus.application.name}
    info-version: ${quarkus.application.version:}
    info-description:
    info-terms-of-service:
    info-contact-name: Stargate
    info-contact-url: https://stargate.io
    info-license-name: Apache 2.0
    info-license-url: https://www.apache.org/licenses/LICENSE-2.0.html

  # swagger UI settings
  swagger-ui:
    path: /swagger-ui
    always-include: true
    title: ${quarkus.application.name}
    # function below enables pre-populating the authentication token in the Swagger UI
    # it's reading the value of the token from the sg-swagger-token cookie, if existing
    # cookie extraction copied from: https://stackoverflow.com/questions/10730362/get-cookie-by-name
    # Swagger configuration reference: https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/
    on-complete: |
      function() {
        const value = '; ' + document.cookie;
        const parts = value.split('; sg-swagger-token=');
        if (parts.length === 2) { 
          const token = parts.pop().split(';').shift();
          ui.preauthorizeApiKey('Token', token);
        }
      }
