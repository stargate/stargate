# Stargate schema-first CQL directives.
#
# They allow you to customize certain aspects of the GraphQL => CQL mapping.
#
# They will be added automatically to any schema uploaded to Stargate (you don't need to copy
# them).


# The type of schema element a GraphQL object maps to
enum EntityTarget { TABLE UDT }


# Customizes the mapping of a GraphQL object to a CQL table or UDT
directive @cql_entity(

    # A custom table or UDT name (otherwise it uses the same name as the object)
    name: String

    # Whether the object maps to a CQL table (the default) or UDT
    target: EntityTarget

) on OBJECT

# Annotates a GraphQL object to trigger the generation of a matching input type.
# The generated type will have the same fields (names and types), and can be referenced in
# mutations that target the corresponding CQL table or UDT.
directive @cql_input(

    # The name of the generated type. If not specified, it will be generated by appending 'Input'
    # to the name of the original object
    name: String

) on OBJECT

# The sorting order for clustering columns
enum ClusteringOrder { ASC DESC }


# Customizes the mapping of a GraphQL field to a CQL column (or UDT field)
directive @cql_column(

    # A custom column name (otherwise it uses the same name as the field)
    name: String

    # Whether the column forms part of the partition key
    partitionKey: Boolean

    # Whether the column is a clustering column, and if so in which order
    clusteringOrder: ClusteringOrder

    # The CQL type to map to (e.g. frozen<list<varchar>>)
    type: String

) on FIELD_DEFINITION