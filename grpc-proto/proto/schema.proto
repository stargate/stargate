/*
 * Copyright The Stargate Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "query.proto";

option java_package = "io.stargate.proto";
option go_package = "stargate/proto";

package stargate;

// COLUMNS

enum ColumnOrderBy {
  ASC = 0x00;
  DESC = 0x01;
}

// INDEXES

enum IndexingType {
  DEFAULT = 0;
  KEYS = 1;
  // Note: should be named `VALUES`, but adding a trailing underscore to avoid a clash with an
  // internal variable in the protobuf-generated Java code.
  VALUES_ = 2;
  ENTRIES = 3;
  FULL = 4;
}

message CqlIndex {
  string name = 1;
  string column_name = 2;
  IndexingType indexing_type = 3;
  bool custom = 4;
  google.protobuf.StringValue indexing_class = 5;
  map<string, string> options = 6;
}

// MATERIALIZED VIEWS

message CqlMaterializedView {
  string name = 1;
  map<string, string> options = 2;
  repeated ColumnSpec partition_key_columns = 3;
  repeated ColumnSpec clustering_key_columns = 4;
  repeated ColumnSpec columns = 5;
  map <string, ColumnOrderBy> clustering_orders = 6;
}

// TABLES

message CqlTable {
  string name = 1;
  map<string, string> options = 2;
  repeated ColumnSpec partition_key_columns = 3;
  repeated ColumnSpec clustering_key_columns = 4;
  repeated ColumnSpec static_columns = 5;
  repeated ColumnSpec columns = 6;
  map <string, ColumnOrderBy> clustering_orders = 7;
  repeated CqlIndex indexes = 8;
  repeated CqlMaterializedView materialized_views = 9;
}

// KEYSPACES

message CqlKeyspace {
  string name = 1;
  map<string, string> options = 2;
}

message DescribeKeyspaceQuery {
  string keyspace_name = 1;
}

message CqlKeyspaceDescribe {
  CqlKeyspace cql_keyspace = 1;
  repeated TypeSpec.Udt types = 2;
  repeated CqlTable tables = 3;
  repeated CqlIndex indexes = 4;
  repeated CqlMaterializedView materialized_views = 5;
}

message DescribeTableQuery {
  string keyspace_name = 1;
  string table_name = 2;
}

// Note: the existing Response type is designed for both DML and DDL (schema) queries

// The arguments to a `getSchemaNotifications` query.
// Intentionally empty, the query doesn't take arguments. This only exists for future extensibility.
message GetSchemaNotificationsParams {
}

message SchemaNotification {

  // An empty message that gets sent first on the response stream.
  // When the client receives this message, the server-side handler is fully initialized and
  // guaranteed to not miss any notification.
  message Ready {}

  oneof inner {
    Ready ready = 1;
    SchemaChange change = 2;
  }
}

// A request to authorize a series of schema reads.
message AuthorizeSchemaReadsRequest {
  repeated SchemaRead schema_reads = 1;
}

message SchemaRead {
  enum SourceApi {
    GRAPHQL = 0;
    REST = 1;
  }
  enum ElementType {
    KEYSPACE = 0;
    TABLE = 1;
    FUNCTION = 2;
    TYPE = 3;
    TRIGGER = 4;
    AGGREGATE = 5;
    VIEW = 6;
    INDEX = 7;
  }

  string keyspace_name = 1;
  // The name of the element in the keyspace (empty if element_type = KEYSPACE)
  google.protobuf.StringValue element_name = 2;
  // The type of element
  ElementType element_type = 3;
  // The Stargate API that initiated the request
  SourceApi source_api = 4;
}

// The response to an AuthorizeSchemaReadsRequest.
// The elements are in the same order as those of the request.
message AuthorizeSchemaReadsResponse {
  repeated bool authorized = 1;
}
