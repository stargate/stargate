/*
 * Copyright The Stargate Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

import "google/protobuf/wrappers.proto";

option java_package = "io.stargate.proto";
option go_package = "stargate/proto";

package stargate;

// TYPES

enum CqlType {
  ASCII = 0x00;
  BIGINT = 0x01;
  BLOB = 0x02;
  BOOLEAN = 0x03;
  COUNTER = 0x04;
  DATE = 0x05;
  DECIMAL = 0x06;
  DOUBLE = 0x07;
  DURATION = 0x08;
  FLOAT = 0x09;
  INET = 0x0A;
  INT = 0x0B;
  LIST = 0x0C;
  LINESTRING = 0x0D;
  MAP = 0x0E;
  POINT = 0x0F;
  POLYGON = 0x10;
  SMALLINT = 0x11;
  TEXT = 0x12;
  TIME = 0x13;
  TIMESTAMP = 0x14;
  TIMEUUID = 0x15;
  TINYINT = 0x16;
  TUPLE = 0x17;
  UDT = 0x18;
  UUID = 0x19;
  VARCHAR = 0x1A;
  VARINT = 0x1B;
}

// USER DEFINED TYPES

message CqlUdtField {
  string name = 1;

  CqlType type = 2;

  // only used for UDTs (UDTs can reference other UDTs, but they must be frozen)
  string cqlTypeName = 3;

  bool frozen = 4;
}

message CqlUserDefinedType {
  string name = 1;

  repeated CqlUdtField fields = 2;

}

// COLUMNS

enum CqlColumnOrderBy {
  ASC = 0x00;
  DESC = 0x01;
}

message CqlComplexColumnType {
  CqlType type = 1;

  // only used if type=UDT
  string udtTypeName = 2;

  bool frozen = 3;
}

message CqlColumn {

  string name = 1;

  CqlType type = 2;

  // only used if type=UDT
  string udtTypeName = 3;

  // only used if type is one of {SET, LIST, MAP, TUPLE}
  // for SET and LIST, this will have one element
  //   example: direct_reports set<frozen <fullname>> -> CqlComplexColumnType(UDT, fullname, true)
  //   example: prime_numbers list<int> -> CqlComplexColumnType(INT, null, false)
  // for MAP, this will have two elements, the key type, followed by the value type
  //   example: addresses map<string, frozen<address>> -> CqlComplexColumnType(STRING, null, false),
  //     CqlComplexColumnType(UDT, address, true)
  // for TUPLE, this will have as many elements as are referenced
  //   example: values <tuple<int, text, float>> -> CqlComplexColumnType(INT, null, false),
  //     CqlComplexColumnType(STRING, null, false), CqlComplexColumnType(FLOAT, null, false)
  repeated CqlComplexColumnType complexColumnTypes = 4;

  bool isFrozen = 5;

}

// TABLES

message CqlTable {
  string name = 1;
  map<string, string> options = 2;
  repeated CqlColumn partitionKeyColumns = 3;
  repeated CqlColumn clusteringKeyColumns = 4;
  repeated CqlColumn staticColumns = 5;
  repeated CqlColumn columns = 6;
}

message CqlTableCreate {
  CqlTable table = 1;
  bool ifNotExists = 2;
}

// INDEXES

message CqlIndex {
  // TODO
}

// MATERIALIZED VIEWS

message CqlMaterializedView {
  // TODO
}

// KEYSPACES

message CqlKeyspace {
  string name = 1;
  map<string, string> options = 2;
}

message CqlKeyspaceCreate {
  CqlKeyspace keyspace = 1;
  bool ifNotExists = 2;
}

message DescribeKeyspaceQuery {
  string keyspaceName = 1;
}

message CqlKeyspaceDescribe {
  CqlKeyspace cqlKeyspace = 1;
  repeated CqlUserDefinedType types = 2;
  repeated CqlTable tables = 3;
  repeated CqlIndex indexes = 4;
  repeated CqlMaterializedView materializedViews = 5;
}

message DescribeTableQuery {
  string keyspaceName = 1;
  string tableName = 2;
}

// SCHEMA CREATION

message CqlSchemaOperation {
  oneof schema {
    CqlTable table = 1;
    CqlUserDefinedType udt = 2;
    CqlIndex index = 3;
    CqlMaterializedView mv = 4;
  }

  bool ifNotExists = 5;
}

// Note: the existing Response type is designed for both DML and DDL (schema) queries
