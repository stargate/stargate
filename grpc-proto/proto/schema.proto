/*
 * Copyright The Stargate Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "query.proto";

option java_package = "io.stargate.proto";
option go_package = "stargate/proto";

package stargate;

// TYPES

// TABLES

message UserDefinedTypeCreate {
  string keyspaceName = 1;
  TypeSpec.Udt udt = 2;
  bool ifNotExists = 3;
}

// COLUMNS

enum ColumnOrderBy {
  ASC = 0x00;
  DESC = 0x01;
}

// TABLES

message CqlTable {
  string name = 1;
  map<string, string> options = 2;
  repeated ColumnSpec partitionKeyColumns = 3;
  repeated ColumnSpec clusteringKeyColumns = 4;
  repeated ColumnSpec staticColumns = 5;
  repeated ColumnSpec columns = 6;
  map <string, ColumnOrderBy> clusteringKeyColumnSortOrders = 7;
}

message CqlTableCreate {
  CqlTable table = 1;
  bool ifNotExists = 2;
}

// INDEXES

message CqlIndex {
  // TODO
}

// MATERIALIZED VIEWS

message CqlMaterializedView {
  // TODO
}

// KEYSPACES

message CqlKeyspace {
  string name = 1;
  map<string, string> options = 2;
}

message CqlKeyspaceCreate {
  CqlKeyspace keyspace = 1;
  bool ifNotExists = 2;
}

message DescribeKeyspaceQuery {
  string keyspaceName = 1;
}

message CqlKeyspaceDescribe {
  CqlKeyspace cqlKeyspace = 1;
  repeated TypeSpec.Udt types = 2;
  repeated CqlTable tables = 3;
  repeated CqlIndex indexes = 4;
  repeated CqlMaterializedView materializedViews = 5;
}

message DescribeTableQuery {
  string keyspaceName = 1;
  string tableName = 2;
}

// Note: the existing Response type is designed for both DML and DDL (schema) queries
