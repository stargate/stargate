/*
 * Copyright The Stargate Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

option java_package = "io.stargate.proto";
option go_package = "stargate/proto";

package stargate;

enum Consistency {
  CONSISTENCY_ANY = 0x00;
  CONSISTENCY_ONE = 0x01;
  CONSISTENCY_TWO = 0x02;
  CONSISTENCY_THREE = 0x03;
  CONSISTENCY_QUORUM = 0x04;
  CONSISTENCY_ALL = 0x05;
  CONSISTENCY_LOCAL_QUORUM = 0x06;
  CONSISTENCY_EACH_QUORUM = 0x07;
  CONSISTENCY_SERIAL = 0x08;
  CONSISTENCY_LOCAL_SERIAL = 0x09;
  CONSISTENCY_LOCAL_ONE = 0x0A;
}

message ConsistencyValue {
  Consistency value = 1;
}

message Collection {
  repeated Value elements = 1;
}

message Map {
  message Pair {
    Value key = 1;
    Value value = 2;
  }
  Pair pairs = 1;
}

message UdtValue {
  map<string, Value> fields = 1;
}

message Uuid {
  // TODO: Is this going to have endian problems representing it this way?
  fixed64 msb = 1;
  fixed64 lsb = 2;
}

message Value {
  message Null {}
  message Unset {}
  oneof inner {
    Null null = 1;
    Unset unset = 2;

    // CQL types: tinyint, smallint, int, bigint, counter, timestamp
    sint64 int = 3;

    // CQL types: float
    float float = 4;

    // CQL types: double
    double double = 5;

    // CQL types: boolean
    bool boolean = 6;

    // CQL types: ascii, varchar, text
    string string = 7;

    // CQL types: blob, inet, custom
    bytes bytes = 8;

    // CQL types: uuid, timeuuid
    Uuid uuid = 9;

    // CQL types: date
    // An unsigned integer representing days with Unix epoch (January, 1 1970) at 2^31.
    // Examples:
    // 0:    -5877641-06-23
    // 2^31: 1970-1-1
    // 2^32: 5881580-07-11
    uint32 date = 10;

    // CQL types: time
    // An unsigned integer representing the number of nanoseconds since midnight. Valid values are
    // in the range 0 to 86399999999999 (inclusive).
    uint64 time = 11;

    // CQL types: list, set, tuple
    Collection collection = 12;

    // CQL types: map
    Map map = 13;

    // CQL types: user defined types
    UdtValue udt = 14;
  }
}

message Query {
  string cql = 1;
  QueryParameters parameters = 2;
}

message Values {
  repeated Value values = 1;
  repeated string value_names = 2;
}

message Payload {
  Type type = 1;
  enum Type { // Do we need an enum here or can we detect the type from Any?
    TYPE_CQL = 0;
    // TYPE_JSON = 1;
    // TYPE_AVRO = 2;
    // ...
  }
  google.protobuf.Any value = 2;
}

message QueryParameters {
  google.protobuf.StringValue keyspace = 1;
  // TODO: Output payload type? Or is it the same as the input and CQL by default?
  Payload payload = 2;
  ConsistencyValue consistency = 3;
  google.protobuf.Int32Value page_size = 4;
  google.protobuf.BytesValue paging_state = 5;
  bool tracing = 6;
  bool skip_metadata = 7;
  google.protobuf.Int64Value timestamp = 8;
  ConsistencyValue serial_consistency = 9;
  google.protobuf.Int32Value now_in_seconds = 10;
}

message TypeSpec {
  enum Type {
    TYPE_CUSTOM = 0x00;
    TYPE_ASCII = 0x01;
    TYPE_BIGINT = 0x02;
    TYPE_BLOB = 0x03;
    TYPE_BOOLEAN = 0x04;
    TYPE_COUNTER = 0x05;
    TYPE_DECIMAL = 0x06;
    TYPE_DOUBLE = 0x07;
    TYPE_FLOAT = 0x08;
    TYPE_INT = 0x09;
    TYPE_TIMESTAMP = 0x0B;
    TYPE_UUID = 0x0C;
    TYPE_VARCHAR = 0x0D;
    TYPE_VARINT = 0x0E;
    TYPE_TIMEUUID = 0x0F;
    TYPE_INET = 0x10;
    TYPE_DATE = 0x11;
    TYPE_TIME = 0x12;
    TYPE_SMALLINT = 0x13;
    TYPE_TINYINT = 0x14;
    TYPE_LIST = 0x20;
    TYPE_MAP = 0x21;
    TYPE_SET = 0x22;
    TYPE_UDT = 0x30;
    TYPE_TUPLE = 0x31;
  }
  Type type = 1;
  oneof complex {
    MapSpec map = 2;
    ListSpec list = 3;
    SetSpec set = 4;
    UdtSpec udt = 5;
    TupleSpec tuple = 6;
  };
}

message MapSpec {
  TypeSpec key = 1;
  TypeSpec value = 2;
}

message ListSpec {
  TypeSpec element = 1;
}

message SetSpec {
  TypeSpec element = 1;
}

message UdtSpec {
  map<string, TypeSpec> fields = 1;
}

message TupleSpec {
  repeated TypeSpec elements = 1;
}

message ColumnSpec {
  TypeSpec type = 1;
  string name = 2;
}

message Result {
  Payload payload = 1;
  bytes tracing_id = 2;
  repeated string warnings = 3;
}

message Unavailable {
  Consistency consistency = 1;
  int32 required = 2;
  int32 alive = 3;
};

message WriteTimeout {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  string write_type = 4;
};

message ReadTimeout {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  bool data_present = 4;
};

message ReadFailure {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  int32 num_failures = 4;
  bool data_present = 5;
};

message FunctionFailure {
  string keyspace = 1;
  string function = 2;
  repeated string arg_types = 3;
}

message WriteFailure {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  int32 num_failures = 4;
  string write_type = 5;
}

message AlreadyExists {
  string keyspace = 1;
  string table = 2;
}

message Row {
  repeated Value values = 1;
}

message ResultSet {
  repeated ColumnSpec columns = 1;
  repeated Row rows = 2;
  google.protobuf.Int32Value page_size = 3;
  google.protobuf.BytesValue paging_state = 4;
}

message BatchQuery {
  string cql = 1;
  Payload payload = 2;
}

message BatchParameters {
  string keyspace = 1;
  Consistency consistency = 2;
  int64 timestamp = 9;
  Consistency serial_consistency = 10;
  int32 now_in_seconds = 11;
}

message Batch {
  enum Type {
    TYPE_LOGGED = 0;
    TYPE_UNLOGGED = 1;
    TYPE_COUNTER = 2;
  }
  Type type = 1;
  repeated BatchQuery queries = 2;
  BatchParameters parameters = 3;
}