/*
 * Copyright The Stargate Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

option java_package = "io.stargate.proto";
option go_package = "stargate/proto";

package stargate;

enum Consistency {
  ANY = 0x00;
  ONE = 0x01;
  TWO = 0x02;
  THREE = 0x03;
  QUORUM = 0x04;
  ALL = 0x05;
  LOCAL_QUORUM = 0x06;
  EACH_QUORUM = 0x07;
  SERIAL = 0x08;
  LOCAL_SERIAL = 0x09;
  LOCAL_ONE = 0x0A;
}

message ConsistencyValue {
  Consistency value = 1;
}

message Collection {
  repeated Value elements = 1;
}

message UdtValue {
  map<string, Value> fields = 1;
}

message Uuid {
  // TODO: Is this going to have endian problems representing it this way?
  fixed64 msb = 1;
  fixed64 lsb = 2;
}

message Value {
  message Null {}
  message Unset {}
  oneof inner {
    Null null = 1;
    Unset unset = 2;

    // CQL types: tinyint, smallint, int, bigint, counter, timestamp
    sint64 int = 3;

    // CQL types: float
    float float = 4;

    // CQL types: double
    double double = 5;

    // CQL types: boolean
    bool boolean = 6;

    // CQL types: ascii, varchar, text
    string string = 7;

    // CQL types: blob, inet, custom
    bytes bytes = 8;

    // CQL types: uuid, timeuuid
    Uuid uuid = 9;

    // CQL types: date
    // An unsigned integer representing days with Unix epoch (January, 1 1970) at 2^31.
    // Examples:
    // 0:    -5877641-06-23
    // 2^31: 1970-1-1
    // 2^32: 5881580-07-11
    uint32 date = 10;

    // CQL types: time
    // An unsigned integer representing the number of nanoseconds since midnight. Valid values are
    // in the range 0 to 86399999999999 (inclusive).
    uint64 time = 11;

    // CQL types: list, set, map, tuple
    Collection collection = 12;

    // CQL types: user defined types
    UdtValue udt = 13;
  }
}

message Query {
  string cql = 1;
  Payload values = 2;
  QueryParameters parameters = 3;
}

message Values {
  repeated Value values = 1;
  repeated string value_names = 2;
}

message Payload {
  Type type = 1;
  enum Type {
    CQL = 0;
    // JSON = 1;
    // AVRO = 2;
    // ...
  }
  google.protobuf.Any data = 2;
}

message QueryParameters {
  google.protobuf.StringValue keyspace = 1;
  ConsistencyValue consistency = 2;
  google.protobuf.Int32Value page_size = 3;
  google.protobuf.BytesValue paging_state = 4;
  bool tracing = 5;
  bool skip_metadata = 6;
  google.protobuf.Int64Value timestamp = 7;
  ConsistencyValue serial_consistency = 8;
  google.protobuf.Int32Value now_in_seconds = 9;
  ConsistencyValue tracing_consistency = 10;
}

message TypeSpec {
  enum Basic {
    CUSTOM = 0x00;
    ASCII = 0x01;
    BIGINT = 0x02;
    BLOB = 0x03;
    BOOLEAN = 0x04;
    COUNTER = 0x05;
    DECIMAL = 0x06;
    DOUBLE = 0x07;
    FLOAT = 0x08;
    INT = 0x09;
    TEXT = 0xA;
    TIMESTAMP = 0x0B;
    UUID = 0x0C;
    VARCHAR = 0x0D;
    VARINT = 0x0E;
    TIMEUUID = 0x0F;
    INET = 0x10;
    DATE = 0x11;
    TIME = 0x12;
    SMALLINT = 0x13;
    TINYINT = 0x14;
  }

  message Map {
    TypeSpec key = 1;
    TypeSpec value = 2;
  }

  message List {
    TypeSpec element = 1;
  }

  message Set {
    TypeSpec element = 1;
  }

  message Udt {
    map<string, TypeSpec> fields = 1;
  }

  message Tuple {
    repeated TypeSpec elements = 1;
  }

  oneof spec {
    Basic basic = 1;
    Map map = 2;
    List list = 3;
    Set set = 4;
    Udt udt = 5;
    Tuple tuple = 6;
  };
}

message ColumnSpec {
  TypeSpec type = 1;
  string name = 2;
}

message Traces {
  message Event {
    string activity = 1;
    string source = 2;
    int64 source_elapsed = 3;
    string thread = 4;
    string event_id = 5;
  }
  string id = 1;
  int64 duration = 2;
  int64 started_at = 3;
  repeated Event events = 4;
}

message Response {
  Payload result_set = 1;
  repeated string warnings = 3;
  Traces traces = 4;
}

message Unavailable {
  Consistency consistency = 1;
  int32 required = 2;
  int32 alive = 3;
};

message WriteTimeout {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  string write_type = 4;
};

message ReadTimeout {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  bool data_present = 4;
};

message ReadFailure {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  int32 num_failures = 4;
  bool data_present = 5;
};

message FunctionFailure {
  string keyspace = 1;
  string function = 2;
  repeated string arg_types = 3;
}

message WriteFailure {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  int32 num_failures = 4;
  string write_type = 5;
}

message AlreadyExists {
  string keyspace = 1;
  string table = 2;
}

message CasWriteUnknown {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
}

message Row {
  repeated Value values = 1;
}

message ResultSet {
  repeated ColumnSpec columns = 1;
  repeated Row rows = 2;
  google.protobuf.Int32Value page_size = 3;
  google.protobuf.BytesValue paging_state = 4;
}

message BatchQuery {
  string cql = 1;
  Payload values = 2;
}

message BatchParameters {
  google.protobuf.StringValue keyspace = 1;
  ConsistencyValue consistency = 2;
  bool tracing = 3;
  google.protobuf.Int64Value timestamp = 4;
  ConsistencyValue serial_consistency = 5;
  google.protobuf.Int32Value now_in_seconds = 6;
  ConsistencyValue tracing_consistency = 7;
}

message Batch {
  enum Type {
    LOGGED = 0;
    UNLOGGED = 1;
    COUNTER = 2;
  }
  Type type = 1;
  repeated BatchQuery queries = 2;
  BatchParameters parameters = 3;
}