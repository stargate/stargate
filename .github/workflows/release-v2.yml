name: Release v2

on:
  push:
    tags:
      - 'v2.*.*'

  workflow_dispatch:
    inputs:
      skipPublish:
        description: 'Skip publishing docker images and JARs to OSSRH?'
        required: true
        default: true
        type: boolean
      tag:
        description: 'Custom release tag value.'
        required: true
        type: string

# global env vars, available in all jobs and steps
env:
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  MAVEN_OPTS: '-Xmx4g'

jobs:

  # resolves tag value
  # outputs the resolved release tag value in the release-tag output var
  resolve-tag:
    name: Resolve tag
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.resolve_tag.outputs.tag }}
    steps:
      - name: Resolve tag
        id: resolve_tag
        run: |
          TAG=${{ inputs.tag != null && inputs.tag || github.ref }}
          echo "Resolved tag for the release $TAG"
          echo "::set-output name=tag::${TAG}"

  # creates a new release if it's not existing
  # outputs the upload URL in the release-upload-url output var
  create-release:
    name: Create release
    needs: resolve-tag
    runs-on: ubuntu-latest
    outputs:
      release-upload-url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.resolve-tag.outputs.release-tag}}
          release_name: Release ${{needs.resolve-tag.outputs.release-tag}}
          draft: false
          prerelease: true

  # builds coordinator, zips stargate-lib folder and uploads the zip to the created release
  build:
    name: Build coordinator
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: maven

      - name: Setup Maven
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Build with Maven
        run: |
          ./mvnw versions:set -DremoveSnapshot versions:commit
          ./mvnw -P dse -q -ff clean package -DskipTests

      - name: Zip-up `stargate-lib`
        run: |
          zip -r stargate-jars.zip starctl* stargate-lib

      # uploads the jars by referencing the release-upload-url from create-release job
      - name: Upload jars
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.release-upload-url}}
          asset_path: stargate-jars.zip
          asset_name: stargate-jars.zip
          asset_content_type: application/zip

  # publish coordinator JARs to the OSSRH
  publish-ossrh:
    name: Publish to OSSRH
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: maven

      - name: Setup Maven
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>ossrh</id>
                <username>${OSSRH_USERNAME}</username>
                <password>${OSSRH_TOKEN}</password>
              </server>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import

      - name: Publish package
        if: ${{ !inputs.skipPublish }}
        run: |
          ./mvnw versions:set -DremoveSnapshot versions:commit
          ./mvnw -B -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} clean deploy -DskipTests -P deploy,dse

  # publishes the docker images for the coordinator and the APIs
  publish-docker:
    name: Publish docker images
    needs: resolve-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # install both Java 8 & Java 17, keep paths in vars
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: maven
      - run: echo "JAVA_8=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven
      - run: echo "JAVA_17=$JAVA_HOME" >> $GITHUB_ENV

      - name: Setup Maven
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Install coordinator
        run: |
          JAVA_HOME=$JAVA_8 ./mvnw versions:set -DremoveSnapshot versions:commit
          JAVA_HOME=$JAVA_8 ./mvnw -B clean install -P dse -DskipTests 

      # only set version here
      - name: Install APIs
        run: |
          cd apis/
          JAVA_HOME=$JAVA_17 ./mvnw versions:set -DremoveSnapshot versions:commit
          cd ../

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # build and push images to Docker hub
      # if input.skipPublish is true we are still having tasks for building images without push
      # this enables build docker check without pushing
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push (coordinator, DockerHub)
        if: ${{ !inputs.skipPublish }}
        run: |
          ./build_docker_images.sh -p -t ${{needs.resolve-tag.outputs.release-tag}}

      - name: Build without push (coordinator, DockerHub)
        if: ${{ inputs.skipPublish }}
        run: |
          ./build_docker_images.sh -t ${{needs.resolve-tag.outputs.release-tag}}

      - name: Build and push (apis, DockerHub)
        if: ${{ !inputs.skipPublish }}
        run: |
          cd apis/
          JAVA_HOME=$JAVA_17 ./mvnw clean package -DskipTests -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}
          cd ../

      - name: Build without push (apis, DockerHub)
        if: ${{ inputs.skipPublish }}
        run: |
          cd apis/
          JAVA_HOME=$JAVA_17 ./mvnw clean package -DskipTests -Dquarkus.container-image.build=true -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}
          cd ../

      # repeat the same for the AWS ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push (coordinator, Amazon ECR)
        if: ${{ !inputs.skipPublish }}
        run: |
          ./build_docker_images.sh -p -t ${{needs.resolve-tag.outputs.release-tag}} -r ${{ secrets.ECR_REPOSITORY }} -a

      - name: Build and push (apis, Amazon ECR)
        if: ${{ !inputs.skipPublish }}
        run: |
          cd apis/
          JAVA_HOME=$JAVA_17 ./mvnw clean package -DskipTests -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true -Dquarkus.container-image.registry=${{ secrets.ECR_REPOSITORY }} -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}
          cd ../

  # creates a PR for bumping the versions to the next snapshot
  create-pr:
    name: Version upgrade PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # since we only bump the versions, Java 17 only is fine here
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Setup Maven
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Update version numbers (coordinator)
        run: |
          ./mvnw -B release:update-versions -DautoVersionSubmodules=true versions:commit -Pdse
          ./mvnw xml-format:xml-format fmt:format -Pdse

      - name: Update version numbers (apis)
        run: |
          cd apis/
          ./mvnw -B release:update-versions -DautoVersionSubmodules=true versions:commit
          ./mvnw xml-format:xml-format fmt:format
          cd ../

      - name: Rev Version
        if: success()
        uses: peter-evans/create-pull-request@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit-message: "Bumping version for next v2 release"
          title: "Bumping version for next v2 release"
          branch-suffix: "short-commit-hash"
          base: "v2.0.0"
          labels: "stargate-v2"
