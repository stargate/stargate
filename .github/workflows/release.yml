name: Release

on:
  push:
    tags:
      - 'v1.*.*'

  workflow_dispatch:
    inputs:
      publish:
        description: 'Should the publishing JARs to OSSRH happen?'
        required: true
        default: false
        type: boolean

jobs:

  # creates a new release if it's not existing
  # outputs the upload URL in the release-upload-url output var
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      release-upload-url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  # builds coordinator, zips stargate-lib folder and uploads the zip to the created release
  build:
    name: Build
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: maven

      - name: Setup Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          MAVEN_OPTS: '-Xmx4g'
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Build with Maven
        run: |
          mvn versions:set -DremoveSnapshot versions:commit
          mvn -P dse -q -ff clean package -DskipTests

      - name: Zip-up `stargate-lib`
        run: |
          zip stargate-jars.zip starctl stargate-lib/logback.xml stargate-lib/*.jar
          
      # uploads the jars by referencing the release-upload-url from create-release job
      - name: Upload jars
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.release-upload-url}}
          asset_path: stargate-jars.zip
          asset_name: stargate-jars.zip
          asset_content_type: text/html

  # publish coordinator JARs to the OSSRH
  publish:
    name: Publish to OSSRH
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # TODO remove after testing
      - name: Warn publish
        if: ${{ inputs.publish != false }}
        run: |
          echo "ATTENTION: This job will publish JARs to the OOSRH!"

      # TODO resolve if this is needed at all
      - name: Set version
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: maven

      - name: Setup Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_OPTS: '-Xmx4g'
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>ossrh</id>
                <username>${OSSRH_USERNAME}</username>
                <password>${OSSRH_TOKEN}</password>
              </server>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import

      - name: Publish package
        if: ${{ inputs.publish != false }}
        run: |
          mvn versions:set -DremoveSnapshot versions:commit && \
          mvn -B -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} clean deploy -DskipTests -P deploy,dse && \

      - name: Bump versions
        run: |
          mvn -B release:update-versions -DautoVersionSubmodules=true versions:commit -Pdse && \
          mvn xml-format:xml-format fmt:format -Pdse

      - name: Rev Version
        if: success()
        uses: peter-evans/create-pull-request@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit-message: "Bumping version for next release"
          title: "Bumping version for next release"
          branch-suffix: "short-commit-hash"
          base: "master"
